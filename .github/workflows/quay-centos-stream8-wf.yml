name: "quay centos stream8 CI workflow"


on:
  push:
    branches: [ test ]


jobs:
    
      
#OK
  ubuntu-latest-centos-stream8-single-quay-job:
    name: "quay single centos-stream8 docker image ubuntu-latest"
    runs-on: ubuntu-latest
    env:
      distribution: "centos" #https://hub.docker.com/_/centos
      version: "latest"
      name: "centos/stream8"
      dockerfiledir: "dockerfiles"  
      dockerfilename: "quay.stream8.single"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch 
    - name: "docker build centos stream"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        docker image ls
        docker image history ${name}:${version}
        docker system df -v               
        docker image inspect ${name}:${version}         


  ubuntu-latest-centos-stream8-python3-quay-job:
    name: "quay python3 centos-stream8 docker image ubuntu-latest"
    runs-on: ubuntu-latest
    env:
      distribution: "centos" #https://hub.docker.com/_/centos
      version: "latest"
      name: "centos/stream8"
      dockerfiledir: "dockerfiles"  
      dockerfilename: "quay.stream8.single.python3"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch 
    - name: "docker build centos stream"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        docker image ls
        docker image history ${name}:${version}
        docker system df -v               
        docker image inspect ${name}:${version}